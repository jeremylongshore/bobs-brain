{
  "errors": [],
  "generated_at": "2025-09-20T21:00:29Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 9,
      "CONFIDENCE.LOW": 26,
      "CONFIDENCE.MEDIUM": 2,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 3,
      "SEVERITY.LOW": 6,
      "SEVERITY.MEDIUM": 28,
      "SEVERITY.UNDEFINED": 0,
      "loc": 3461,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/bob_brain_chroma.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 356,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/bob_brain_v5.py": {
      "CONFIDENCE.HIGH": 4,
      "CONFIDENCE.LOW": 8,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 4,
      "SEVERITY.MEDIUM": 9,
      "SEVERITY.UNDEFINED": 0,
      "loc": 1181,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/bobs/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/circle_of_life.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 6,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 3,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 6,
      "SEVERITY.UNDEFINED": 0,
      "loc": 449,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/circle_of_life_scraper.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 8,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 8,
      "SEVERITY.UNDEFINED": 0,
      "loc": 445,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/ecosystem_integration.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 486,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/enhanced_bob/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/memory/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/mvp3_bigquery_monitor.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 2,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 190,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/mvp3_bigquery_schema.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 354,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/tools/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "465     logger.info(f\"\ud83d\ude80 Starting Bob's Brain v6.0 on port {port}\")\n466     bob.app.run(host=\"0.0.0.0\", port=port, debug=False)\n467 \n",
      "col_offset": 21,
      "end_col_offset": 30,
      "filename": "src/bob_brain_chroma.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 466,
      "line_range": [
        466
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "444                 try:\n445                     query_sql = f\"\"\"\n446                     SELECT message, response, timestamp\n447                     FROM `{self.project_id}.conversations.history`\n448                     WHERE user = @user\n449                     AND (LOWER(message) LIKE LOWER(@pattern) OR LOWER(response) LIKE LOWER(@pattern))\n450                     ORDER BY timestamp DESC\n451                     LIMIT 3\n452                     \"\"\"\n453 \n",
      "col_offset": 36,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 445,
      "line_range": [
        445,
        446,
        447,
        448,
        449,
        450,
        451,
        452
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "496                 try:\n497                     query_sql = f\"\"\"\n498                     SELECT message, response, timestamp\n499                     FROM `{self.project_id}.conversations.history`\n500                     WHERE user = @user\n501                     ORDER BY timestamp DESC\n502                     LIMIT @limit\n503                     \"\"\"\n504 \n",
      "col_offset": 36,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 497,
      "line_range": [
        497,
        498,
        499,
        500,
        501,
        502,
        503
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "539             try:\n540                 manual_query = f\"\"\"\n541                 SELECT content, source\n542                 FROM `{self.project_id}.knowledge_base.repair_manuals`\n543                 WHERE LOWER(content) LIKE LOWER(@pattern)\n544                 LIMIT 3\n545                 \"\"\"\n546 \n",
      "col_offset": 35,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 540,
      "line_range": [
        540,
        541,
        542,
        543,
        544,
        545
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "554                     knowledge.append(f\"\ud83d\udcd6 Manual: {row.content[:200]}... (Source: {row.source})\")\n555             except Exception:\n556                 pass\n557 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 555,
      "line_range": [
        555,
        556
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "559             try:\n560                 forum_query = f\"\"\"\n561                 SELECT question, answer, upvotes\n562                 FROM `{self.project_id}.knowledge_base.forum_posts`\n563                 WHERE LOWER(question) LIKE LOWER(@pattern) OR LOWER(answer) LIKE LOWER(@pattern)\n564                 ORDER BY upvotes DESC\n565                 LIMIT 3\n566                 \"\"\"\n567 \n",
      "col_offset": 34,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 560,
      "line_range": [
        560,
        561,
        562,
        563,
        564,
        565,
        566
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "575                     knowledge.append(f\"\ud83d\udcac Forum: Q: {row.question}\\nA: {row.answer} (\ud83d\udc4d {row.upvotes})\")\n576             except Exception:\n577                 pass\n578 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 576,
      "line_range": [
        576,
        577
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "580             try:\n581                 scraped_query = f\"\"\"\n582                 SELECT repair_type, AVG(quoted_price) as avg_price, COUNT(*) as num_quotes\n583                 FROM `{self.project_id}.scraped_data.repair_quotes`\n584                 WHERE LOWER(repair_type) LIKE LOWER(@pattern)\n585                 GROUP BY repair_type\n586                 LIMIT 3\n587                 \"\"\"\n588 \n",
      "col_offset": 36,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 581,
      "line_range": [
        581,
        582,
        583,
        584,
        585,
        586,
        587
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "596                     knowledge.append(f\"\ud83d\udcb0 {row.repair_type}: Avg ${row.avg_price:.2f} ({row.num_quotes} quotes)\")\n597             except Exception:\n598                 pass\n599 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 597,
      "line_range": [
        597,
        598
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "613             # Query S740 issues and solutions\n614             s740_query = f\"\"\"\n615             SELECT\n616                 problem_type,\n617                 problem_description,\n618                 solution,\n619                 ARRAY_TO_STRING(parts_needed, ', ') as parts,\n620                 ARRAY_TO_STRING(error_codes, ', ') as codes,\n621                 difficulty,\n622                 cost_estimate\n623             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n624             WHERE LOWER(problem_description) LIKE LOWER(@pattern)\n625                OR LOWER(solution) LIKE LOWER(@pattern)\n626                OR LOWER(ARRAY_TO_STRING(error_codes, ' ')) LIKE LOWER(@pattern)\n627             LIMIT 5\n628             \"\"\"\n629 \n",
      "col_offset": 29,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 614,
      "line_range": [
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        621,
        622,
        623,
        624,
        625,
        626,
        627,
        628
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "649             # Query equipment hacks\n650             hack_query = f\"\"\"\n651             SELECT\n652                 hack_type,\n653                 title,\n654                 description,\n655                 benefits,\n656                 cost\n657             FROM `{self.project_id}.skidsteer_knowledge.equipment_hacks`\n658             WHERE equipment_model = 'S740'\n659               AND (LOWER(description) LIKE LOWER(@pattern)\n660                    OR LOWER(benefits) LIKE LOWER(@pattern))\n661             LIMIT 3\n662             \"\"\"\n663 \n",
      "col_offset": 29,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 650,
      "line_range": [
        650,
        651,
        652,
        653,
        654,
        655,
        656,
        657,
        658,
        659,
        660,
        661,
        662
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "674             # Query maintenance schedules\n675             maintenance_query = f\"\"\"\n676             SELECT\n677                 service_type,\n678                 interval_hours,\n679                 description,\n680                 ARRAY_TO_STRING(parts_required, ', ') as parts,\n681                 dealer_cost,\n682                 diy_cost\n683             FROM `{self.project_id}.skidsteer_knowledge.maintenance_schedules`\n684             WHERE equipment_model = 'Bobcat S740'\n685               AND LOWER(service_type) LIKE LOWER(@pattern)\n686             LIMIT 3\n687             \"\"\"\n688 \n",
      "col_offset": 36,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 675,
      "line_range": [
        675,
        676,
        677,
        678,
        679,
        680,
        681,
        682,
        683,
        684,
        685,
        686,
        687
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1311                 )\n1312             except Exception:\n1313                 pass  # Don't fail if Slack notification fails\n1314 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 1312,
      "line_range": [
        1312,
        1313
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "1536     logger.info(\"\ud83d\udd04 Circle of Life: Continuous learning from MVP3 diagnostics\")\n1537     app.run(host=\"0.0.0.0\", port=port, debug=False)\n",
      "col_offset": 17,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 1537,
      "line_range": [
        1537
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "177             insight = {\n178                 \"insight_id\": hashlib.md5(str(entity.key).encode()).hexdigest(),\n179                 \"problem_category\": self._categorize_problem(entity.get(\"problem_description\", \"\")),\n",
      "col_offset": 30,
      "end_col_offset": 67,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 178,
      "line_range": [
        178
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "255             # Query for most common problems\n256             common_problems_query = f\"\"\"\n257             SELECT\n258                 problem_category,\n259                 COUNT(*) as frequency,\n260                 AVG(confidence_score) as avg_confidence\n261             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n262             WHERE timestamp > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)\n263             GROUP BY problem_category\n264             ORDER BY frequency DESC\n265             LIMIT 20\n266             \"\"\"\n267 \n",
      "col_offset": 40,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 256,
      "line_range": [
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "275             # Query for effective solutions\n276             solutions_query = f\"\"\"\n277             SELECT\n278                 problem_category,\n279                 solution_provided,\n280                 AVG(confidence_score) as effectiveness\n281             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n282             WHERE solution_provided IS NOT NULL\n283             GROUP BY problem_category, solution_provided\n284             HAVING effectiveness > 0.7\n285             ORDER BY effectiveness DESC\n286             \"\"\"\n287 \n",
      "col_offset": 34,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 276,
      "line_range": [
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "318                         {\n319                             \"pattern_id\": hashlib.md5(f\"{pattern_type}_{key}\".encode()).hexdigest(),\n320                             \"pattern_type\": pattern_type,\n",
      "col_offset": 42,
      "end_col_offset": 87,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 319,
      "line_range": [
        319
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "354             # Query for similar problems and their solutions\n355             similar_query = f\"\"\"\n356             SELECT\n357                 problem_description,\n358                 solution_provided,\n359                 confidence_score\n360             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n361             WHERE problem_category = @category\n362             AND confidence_score > 0.6\n363             ORDER BY confidence_score DESC\n364             LIMIT 5\n365             \"\"\"\n366 \n",
      "col_offset": 32,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 355,
      "line_range": [
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "417         feedback = {\n418             \"feedback_id\": hashlib.md5(f\"{problem}{datetime.now()}\".encode()).hexdigest(),\n419             \"original_problem\": problem[:500],\n",
      "col_offset": 27,
      "end_col_offset": 77,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 418,
      "line_range": [
        418
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "455             # Count total insights\n456             count_query = f\"\"\"\n457             SELECT\n458                 COUNT(*) as total,\n459                 COUNT(DISTINCT problem_category) as categories\n460             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n461             \"\"\"\n462 \n",
      "col_offset": 30,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 456,
      "line_range": [
        456,
        457,
        458,
        459,
        460,
        461
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "468             # Count patterns\n469             patterns_query = f\"\"\"\n470             SELECT COUNT(DISTINCT pattern_id) as patterns\n471             FROM `{self.bob_project}.circle_of_life.learning_patterns`\n472             \"\"\"\n473 \n",
      "col_offset": 33,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 469,
      "line_range": [
        469,
        470,
        471,
        472
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "478             # Calculate learning rate from feedback\n479             feedback_query = f\"\"\"\n480             SELECT\n481                 COUNT(*) as total_feedback,\n482                 COUNTIF(success = true) as successful\n483             FROM `{self.bob_project}.circle_of_life.feedback_loop`\n484             WHERE timestamp > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)\n485             \"\"\"\n486 \n",
      "col_offset": 33,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 479,
      "line_range": [
        479,
        480,
        481,
        482,
        483,
        484,
        485
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "152             # Query newly scraped S740 issues\n153             query = f\"\"\"\n154             SELECT\n155                 problem_type,\n156                 problem_description,\n157                 solution,\n158                 parts_needed,\n159                 error_codes,\n160                 difficulty\n161             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n162             WHERE DATE(scraped_at) = CURRENT_DATE()\n163             \"\"\"\n164 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 153,
      "line_range": [
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "210             # Analyze problem frequency patterns\n211             query = f\"\"\"\n212             WITH problem_frequency AS (\n213                 SELECT\n214                     problem_category,\n215                     COUNT(*) as frequency,\n216                     AVG(confidence_score) as avg_confidence\n217                 FROM `{self.project_id}.circle_of_life.diagnostic_insights`\n218                 WHERE DATE(timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n219                 GROUP BY problem_category\n220                 HAVING COUNT(*) > 5\n221             )\n222             SELECT * FROM problem_frequency\n223             ORDER BY frequency DESC\n224             \"\"\"\n225 \n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 211,
      "line_range": [
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "244             # Analyze solution effectiveness patterns\n245             query = f\"\"\"\n246             SELECT\n247                 solution,\n248                 COUNT(*) as usage_count,\n249                 AVG(CASE WHEN verified THEN 1 ELSE 0 END) as success_rate\n250             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n251             WHERE solution IS NOT NULL AND solution != ''\n252             GROUP BY solution\n253             HAVING COUNT(*) > 3\n254             \"\"\"\n255 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 245,
      "line_range": [
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "325             # Create knowledge summary for Bob\n326             query = f\"\"\"\n327             WITH latest_knowledge AS (\n328                 SELECT\n329                     'S740_ISSUE' as knowledge_type,\n330                     problem_type as category,\n331                     problem_description as content,\n332                     solution as answer,\n333                     ARRAY_TO_STRING(parts_needed, ', ') as parts,\n334                     difficulty,\n335                     source_url\n336                 FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n337                 WHERE DATE(scraped_at) = CURRENT_DATE()\n338 \n339                 UNION ALL\n340 \n341                 SELECT\n342                     'EQUIPMENT_HACK' as knowledge_type,\n343                     hack_type as category,\n344                     description as content,\n345                     benefits as answer,\n346                     ARRAY_TO_STRING(tools_needed, ', ') as parts,\n347                     'moderate' as difficulty,\n348                     source_url\n349                 FROM `{self.project_id}.skidsteer_knowledge.equipment_hacks`\n350                 WHERE DATE(scraped_at) = CURRENT_DATE()\n351             )\n352             INSERT INTO `{self.project_id}.knowledge_base.bob_knowledge`\n353             (knowledge_id, knowledge_type, category, content, answer, metadata, created_at, source)\n354             SELECT\n355                 GENERATE_UUID() as knowledge_id,\n356                 knowledge_type,\n357                 category,\n358                 content,\n359                 answer,\n360                 TO_JSON_STRING(STRUCT(parts as parts, difficulty as difficulty)) as metadata,\n361                 CURRENT_TIMESTAMP() as created_at,\n362                 source_url as source\n363             FROM latest_knowledge\n364             \"\"\"\n365 \n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 326,
      "line_range": [
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "385             self.bq_client.create_dataset(dataset, exists_ok=True)\n386         except Exception:\n387             pass\n388 \n",
      "col_offset": 8,
      "end_col_offset": 16,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 386,
      "line_range": [
        386,
        387
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "403             self.bq_client.create_table(table, exists_ok=True)\n404         except Exception:\n405             pass\n406 \n",
      "col_offset": 8,
      "end_col_offset": 16,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 404,
      "line_range": [
        404,
        405
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "418             # Get top problems found today\n419             query = f\"\"\"\n420             SELECT\n421                 problem_type,\n422                 COUNT(*) as count\n423             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n424             WHERE DATE(scraped_at) = CURRENT_DATE()\n425             GROUP BY problem_type\n426             ORDER BY count DESC\n427             LIMIT 5\n428             \"\"\"\n429 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 419,
      "line_range": [
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "435             # Count new solutions\n436             query = f\"\"\"\n437             SELECT COUNT(DISTINCT solution) as new_solutions\n438             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n439             WHERE DATE(scraped_at) = CURRENT_DATE()\n440             AND solution IS NOT NULL AND solution != ''\n441             \"\"\"\n442 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 436,
      "line_range": [
        436,
        437,
        438,
        439,
        440,
        441
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "480             # Update the scraping history record\n481             query = f\"\"\"\n482             UPDATE `{self.project_id}.circle_of_life.scraping_history`\n483             SET\n484                 end_time = CURRENT_TIMESTAMP(),\n485                 status = 'completed',\n486                 forums_scraped = {results.get('forum_scraping', {}).get('forums_discovered', 0)},\n487                 threads_scraped = {results.get('forum_scraping', {}).get('threads_scraped', 0)},\n488                 solutions_found = {results.get('skidsteer_scraping', {}).get('solutions_found', 0)},\n489                 s740_issues_found = {results.get('skidsteer_scraping', {}).get('issues_found', 0)},\n490                 metadata = PARSE_JSON('{json.dumps({\"phases\": results.get(\"phases_completed\", [])})}')\n491             WHERE scrape_id = '{scrape_id}'\n492             \"\"\"\n493 \n",
      "col_offset": 24,
      "end_col_offset": 20,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 481,
      "line_range": [
        481,
        482,
        483,
        484,
        485,
        486,
        487,
        488,
        489,
        490,
        491,
        492
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "501         try:\n502             query = f\"\"\"\n503             UPDATE `{self.project_id}.circle_of_life.scraping_history`\n504             SET\n505                 end_time = CURRENT_TIMESTAMP(),\n506                 status = 'failed',\n507                 errors = '{error}'\n508             WHERE scrape_id = '{scrape_id}'\n509             \"\"\"\n510 \n",
      "col_offset": 24,
      "end_col_offset": 20,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 502,
      "line_range": [
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "426             # Check if Bob can query the submission\n427             query = f\"\"\"\n428                 SELECT submission_id\n429                 FROM `{table_id}`\n430                 WHERE submission_id = '{test_submission['submission_id']}'\n431             \"\"\"\n432             result = self.bigquery_client.query(query).result()\n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/ecosystem_integration.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 427,
      "line_range": [
        427,
        428,
        429,
        430,
        431
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "41         try:\n42             query = f\"\"\"\n43             SELECT\n44                 submission_id,\n45                 full_name,\n46                 email,\n47                 equipment_type,\n48                 problem_description,\n49                 selected_service,\n50                 payment_status,\n51                 ai_analysis,\n52                 created_at\n53             FROM `{self.project_id}.{self.dataset_id}.{self.table_id}`\n54             WHERE created_at > @last_check\n55             ORDER BY created_at DESC\n56             LIMIT 10\n57             \"\"\"\n58 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/mvp3_bigquery_monitor.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 42,
      "line_range": [
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "136         try:\n137             query = f\"\"\"\n138             SELECT\n139                 DATE(created_at) as date,\n140                 COUNT(*) as total_submissions,\n141                 COUNT(DISTINCT email) as unique_customers,\n142                 SUM(payment_amount) as revenue,\n143                 AVG(ai_confidence_score) as avg_confidence,\n144                 COUNTIF(payment_status = 'completed') as paid_submissions,\n145                 COUNTIF(email_sent) as emails_sent\n146             FROM `{self.project_id}.{self.dataset_id}.{self.table_id}`\n147             WHERE DATE(created_at) = CURRENT_DATE()\n148             GROUP BY date\n149             \"\"\"\n150 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/mvp3_bigquery_monitor.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 137,
      "line_range": [
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "363         view_id = f\"{self.dataset_id}.daily_summary\"\n364         view_query = f\"\"\"\n365         SELECT\n366             DATE(created_at) as date,\n367             COUNT(*) as total_submissions,\n368             COUNT(DISTINCT email) as unique_customers,\n369             SUM(payment_amount) as revenue,\n370             AVG(ai_confidence_score) as avg_confidence,\n371             COUNTIF(payment_status = 'completed') as paid_submissions,\n372             COUNTIF(email_sent) as emails_sent,\n373             ARRAY_AGG(DISTINCT equipment_category IGNORE NULLS) as categories\n374         FROM `{self.dataset_id}.diagnostic_submissions`\n375         WHERE created_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)\n376         GROUP BY date\n377         ORDER BY date DESC\n378         \"\"\"\n379 \n",
      "col_offset": 25,
      "end_col_offset": 14,
      "filename": "src/mvp3_bigquery_schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 364,
      "line_range": [
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    }
  ]
}