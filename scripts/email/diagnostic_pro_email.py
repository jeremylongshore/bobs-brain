#!/usr/bin/env python3
"""
Email module for Diagnostic Pro MVP
Sends reports and notifications from reports@diagnosticpro.io
"""

import os
import smtplib
from datetime import datetime
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


class DiagnosticProEmailer:
    """Email service for Diagnostic Pro MVP"""

    def __init__(self):
        self.sender_email = "reports@diagnosticpro.io"
        self.app_password = os.environ.get("DIAGNOSTIC_EMAIL_PASSWORD", "sfpi ihze imsx kkmc")
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587

    def send_diagnostic_report(self, recipient, vehicle_info, diagnostic_data):
        """Send a diagnostic report to a customer"""

        subject = f"Diagnostic Report - {vehicle_info.get('make', '')} {vehicle_info.get('model', '')} {vehicle_info.get('year', '')}"

        body = f"""
        Diagnostic Report
        Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}

        Vehicle Information:
        - Year: {vehicle_info.get('year', 'N/A')}
        - Make: {vehicle_info.get('make', 'N/A')}
        - Model: {vehicle_info.get('model', 'N/A')}
        - VIN: {vehicle_info.get('vin', 'N/A')}

        Diagnostic Results:
        {diagnostic_data}

        This report was generated by Diagnostic Pro MVP.
        For questions, contact support@diagnosticpro.io
        """

        return self._send_email(recipient, subject, body)

    def send_confirmation(self, recipient, submission_id):
        """Send submission confirmation"""

        subject = "Diagnostic Submission Received"
        body = f"""
        Thank you for submitting your diagnostic request.

        Submission ID: {submission_id}
        Status: Processing

        We'll send you a detailed report shortly.

        - Diagnostic Pro Team
        """

        return self._send_email(recipient, subject, body)

    def send_alert(self, recipient, alert_type, message):
        """Send system alerts"""

        subject = f"[{alert_type}] Diagnostic Pro Alert"
        body = f"""
        System Alert
        Type: {alert_type}
        Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

        {message}

        - Diagnostic Pro System
        """

        return self._send_email(recipient, subject, body)

    def _send_email(self, recipient, subject, body):
        """Internal method to send emails"""

        message = MIMEMultipart()
        message["From"] = self.sender_email
        message["To"] = recipient
        message["Subject"] = subject

        message.attach(MIMEText(body, "plain"))

        try:
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.sender_email, self.app_password)

            server.send_message(message)
            server.quit()

            print(f"✅ Email sent to {recipient}")
            return True

        except Exception as e:
            print(f"❌ Failed to send email: {e}")
            return False


# Example usage
if __name__ == "__main__":
    emailer = DiagnosticProEmailer()

    # Test diagnostic report
    vehicle = {"year": "2019", "make": "Ford", "model": "F-150", "vin": "1FTFW1E57KFC12345"}

    diagnostic = """
    Issues Found:
    - P0301: Cylinder 1 Misfire Detected
    - P0171: System Too Lean (Bank 1)

    Recommended Actions:
    1. Check spark plugs and ignition coils
    2. Inspect fuel injectors
    3. Check for vacuum leaks
    """

    emailer.send_diagnostic_report("jeremylongshore@gmail.com", vehicle, diagnostic)
