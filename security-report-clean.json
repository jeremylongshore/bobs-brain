{
  "errors": [],
  "generated_at": "2025-09-20T19:15:57Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 9,
      "CONFIDENCE.LOW": 26,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 3,
      "SEVERITY.LOW": 6,
      "SEVERITY.MEDIUM": 27,
      "SEVERITY.UNDEFINED": 0,
      "loc": 2963,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/bob_brain_v5.py": {
      "CONFIDENCE.HIGH": 4,
      "CONFIDENCE.LOW": 8,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 4,
      "SEVERITY.MEDIUM": 9,
      "SEVERITY.UNDEFINED": 0,
      "loc": 1126,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/bobs/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/circle_of_life.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 6,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 3,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 6,
      "SEVERITY.UNDEFINED": 0,
      "loc": 420,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/circle_of_life_scraper.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 8,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 8,
      "SEVERITY.UNDEFINED": 0,
      "loc": 442,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/ecosystem_integration.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 471,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/enhanced_bob/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/memory/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/mvp3_bigquery_monitor.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 2,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 190,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/mvp3_bigquery_schema.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 314,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/tools/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "437                 try:\n438                     query_sql = f\"\"\"\n439                     SELECT message, response, timestamp\n440                     FROM `{self.project_id}.conversations.history`\n441                     WHERE user = @user\n442                     AND (LOWER(message) LIKE LOWER(@pattern) OR LOWER(response) LIKE LOWER(@pattern))\n443                     ORDER BY timestamp DESC\n444                     LIMIT 3\n445                     \"\"\"\n446 \n",
      "col_offset": 36,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 438,
      "line_range": [
        438,
        439,
        440,
        441,
        442,
        443,
        444,
        445
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "489                 try:\n490                     query_sql = f\"\"\"\n491                     SELECT message, response, timestamp\n492                     FROM `{self.project_id}.conversations.history`\n493                     WHERE user = @user\n494                     ORDER BY timestamp DESC\n495                     LIMIT @limit\n496                     \"\"\"\n497 \n",
      "col_offset": 36,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 490,
      "line_range": [
        490,
        491,
        492,
        493,
        494,
        495,
        496
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "532             try:\n533                 manual_query = f\"\"\"\n534                 SELECT content, source\n535                 FROM `{self.project_id}.knowledge_base.repair_manuals`\n536                 WHERE LOWER(content) LIKE LOWER(@pattern)\n537                 LIMIT 3\n538                 \"\"\"\n539 \n",
      "col_offset": 35,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 533,
      "line_range": [
        533,
        534,
        535,
        536,
        537,
        538
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "547                     knowledge.append(f\"\ud83d\udcd6 Manual: {row.content[:200]}... (Source: {row.source})\")\n548             except Exception:\n549                 pass\n550 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 548,
      "line_range": [
        548,
        549
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "552             try:\n553                 forum_query = f\"\"\"\n554                 SELECT question, answer, upvotes\n555                 FROM `{self.project_id}.knowledge_base.forum_posts`\n556                 WHERE LOWER(question) LIKE LOWER(@pattern) OR LOWER(answer) LIKE LOWER(@pattern)\n557                 ORDER BY upvotes DESC\n558                 LIMIT 3\n559                 \"\"\"\n560 \n",
      "col_offset": 34,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 553,
      "line_range": [
        553,
        554,
        555,
        556,
        557,
        558,
        559
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "568                     knowledge.append(f\"\ud83d\udcac Forum: Q: {row.question}\\nA: {row.answer} (\ud83d\udc4d {row.upvotes})\")\n569             except Exception:\n570                 pass\n571 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 569,
      "line_range": [
        569,
        570
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "573             try:\n574                 scraped_query = f\"\"\"\n575                 SELECT repair_type, AVG(quoted_price) as avg_price, COUNT(*) as num_quotes\n576                 FROM `{self.project_id}.scraped_data.repair_quotes`\n577                 WHERE LOWER(repair_type) LIKE LOWER(@pattern)\n578                 GROUP BY repair_type\n579                 LIMIT 3\n580                 \"\"\"\n581 \n",
      "col_offset": 36,
      "end_col_offset": 22,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 574,
      "line_range": [
        574,
        575,
        576,
        577,
        578,
        579,
        580
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "589                     knowledge.append(f\"\ud83d\udcb0 {row.repair_type}: Avg ${row.avg_price:.2f} ({row.num_quotes} quotes)\")\n590             except Exception:\n591                 pass\n592 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 590,
      "line_range": [
        590,
        591
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "606             # Query S740 issues and solutions\n607             s740_query = f\"\"\"\n608             SELECT\n609                 problem_type,\n610                 problem_description,\n611                 solution,\n612                 ARRAY_TO_STRING(parts_needed, ', ') as parts,\n613                 ARRAY_TO_STRING(error_codes, ', ') as codes,\n614                 difficulty,\n615                 cost_estimate\n616             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n617             WHERE LOWER(problem_description) LIKE LOWER(@pattern)\n618                OR LOWER(solution) LIKE LOWER(@pattern)\n619                OR LOWER(ARRAY_TO_STRING(error_codes, ' ')) LIKE LOWER(@pattern)\n620             LIMIT 5\n621             \"\"\"\n622 \n",
      "col_offset": 29,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 607,
      "line_range": [
        607,
        608,
        609,
        610,
        611,
        612,
        613,
        614,
        615,
        616,
        617,
        618,
        619,
        620,
        621
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "642             # Query equipment hacks\n643             hack_query = f\"\"\"\n644             SELECT\n645                 hack_type,\n646                 title,\n647                 description,\n648                 benefits,\n649                 cost\n650             FROM `{self.project_id}.skidsteer_knowledge.equipment_hacks`\n651             WHERE equipment_model = 'S740'\n652               AND (LOWER(description) LIKE LOWER(@pattern)\n653                    OR LOWER(benefits) LIKE LOWER(@pattern))\n654             LIMIT 3\n655             \"\"\"\n656 \n",
      "col_offset": 29,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 643,
      "line_range": [
        643,
        644,
        645,
        646,
        647,
        648,
        649,
        650,
        651,
        652,
        653,
        654,
        655
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "667             # Query maintenance schedules\n668             maintenance_query = f\"\"\"\n669             SELECT\n670                 service_type,\n671                 interval_hours,\n672                 description,\n673                 ARRAY_TO_STRING(parts_required, ', ') as parts,\n674                 dealer_cost,\n675                 diy_cost\n676             FROM `{self.project_id}.skidsteer_knowledge.maintenance_schedules`\n677             WHERE equipment_model = 'Bobcat S740'\n678               AND LOWER(service_type) LIKE LOWER(@pattern)\n679             LIMIT 3\n680             \"\"\"\n681 \n",
      "col_offset": 36,
      "end_col_offset": 18,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 668,
      "line_range": [
        668,
        669,
        670,
        671,
        672,
        673,
        674,
        675,
        676,
        677,
        678,
        679,
        680
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1267                 )\n1268             except Exception:\n1269                 pass  # Don't fail if Slack notification fails\n1270 \n",
      "col_offset": 12,
      "end_col_offset": 20,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 1268,
      "line_range": [
        1268,
        1269
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "1481     logger.info(\"\ud83d\udd04 Circle of Life: Continuous learning from MVP3 diagnostics\")\n1482     app.run(host=\"0.0.0.0\", port=port, debug=False)\n",
      "col_offset": 17,
      "end_col_offset": 26,
      "filename": "src/bob_brain_v5.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 1482,
      "line_range": [
        1482
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "172             insight = {\n173                 \"insight_id\": hashlib.md5(str(entity.key).encode()).hexdigest(),\n174                 \"problem_category\": self._categorize_problem(entity.get(\"problem_description\", \"\")),\n",
      "col_offset": 30,
      "end_col_offset": 67,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 173,
      "line_range": [
        173
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "231             # Query for most common problems\n232             common_problems_query = f\"\"\"\n233             SELECT\n234                 problem_category,\n235                 COUNT(*) as frequency,\n236                 AVG(confidence_score) as avg_confidence\n237             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n238             WHERE timestamp > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)\n239             GROUP BY problem_category\n240             ORDER BY frequency DESC\n241             LIMIT 20\n242             \"\"\"\n243 \n",
      "col_offset": 40,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 232,
      "line_range": [
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "251             # Query for effective solutions\n252             solutions_query = f\"\"\"\n253             SELECT\n254                 problem_category,\n255                 solution_provided,\n256                 AVG(confidence_score) as effectiveness\n257             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n258             WHERE solution_provided IS NOT NULL\n259             GROUP BY problem_category, solution_provided\n260             HAVING effectiveness > 0.7\n261             ORDER BY effectiveness DESC\n262             \"\"\"\n263 \n",
      "col_offset": 34,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 252,
      "line_range": [
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "294                         {\n295                             \"pattern_id\": hashlib.md5(f\"{pattern_type}_{key}\".encode()).hexdigest(),\n296                             \"pattern_type\": pattern_type,\n",
      "col_offset": 42,
      "end_col_offset": 87,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 295,
      "line_range": [
        295
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "330             # Query for similar problems and their solutions\n331             similar_query = f\"\"\"\n332             SELECT\n333                 problem_description,\n334                 solution_provided,\n335                 confidence_score\n336             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n337             WHERE problem_category = @category\n338             AND confidence_score > 0.6\n339             ORDER BY confidence_score DESC\n340             LIMIT 5\n341             \"\"\"\n342 \n",
      "col_offset": 32,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 331,
      "line_range": [
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "388         feedback = {\n389             \"feedback_id\": hashlib.md5(f\"{problem}{datetime.now()}\".encode()).hexdigest(),\n390             \"original_problem\": problem[:500],\n",
      "col_offset": 27,
      "end_col_offset": 77,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 327,
        "link": "https://cwe.mitre.org/data/definitions/327.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "line_number": 389,
      "line_range": [
        389
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "test_id": "B324",
      "test_name": "hashlib"
    },
    {
      "code": "426             # Count total insights\n427             count_query = f\"\"\"\n428             SELECT\n429                 COUNT(*) as total,\n430                 COUNT(DISTINCT problem_category) as categories\n431             FROM `{self.bob_project}.circle_of_life.diagnostic_insights`\n432             \"\"\"\n433 \n",
      "col_offset": 30,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 427,
      "line_range": [
        427,
        428,
        429,
        430,
        431,
        432
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "439             # Count patterns\n440             patterns_query = f\"\"\"\n441             SELECT COUNT(DISTINCT pattern_id) as patterns\n442             FROM `{self.bob_project}.circle_of_life.learning_patterns`\n443             \"\"\"\n444 \n",
      "col_offset": 33,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 440,
      "line_range": [
        440,
        441,
        442,
        443
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "449             # Calculate learning rate from feedback\n450             feedback_query = f\"\"\"\n451             SELECT\n452                 COUNT(*) as total_feedback,\n453                 COUNTIF(success = true) as successful\n454             FROM `{self.bob_project}.circle_of_life.feedback_loop`\n455             WHERE timestamp > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)\n456             \"\"\"\n457 \n",
      "col_offset": 33,
      "end_col_offset": 18,
      "filename": "src/circle_of_life.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 450,
      "line_range": [
        450,
        451,
        452,
        453,
        454,
        455,
        456
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "152             # Query newly scraped S740 issues\n153             query = f\"\"\"\n154             SELECT\n155                 problem_type,\n156                 problem_description,\n157                 solution,\n158                 parts_needed,\n159                 error_codes,\n160                 difficulty\n161             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n162             WHERE DATE(scraped_at) = CURRENT_DATE()\n163             \"\"\"\n164 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 153,
      "line_range": [
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "210             # Analyze problem frequency patterns\n211             query = f\"\"\"\n212             WITH problem_frequency AS (\n213                 SELECT\n214                     problem_category,\n215                     COUNT(*) as frequency,\n216                     AVG(confidence_score) as avg_confidence\n217                 FROM `{self.project_id}.circle_of_life.diagnostic_insights`\n218                 WHERE DATE(timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)\n219                 GROUP BY problem_category\n220                 HAVING COUNT(*) > 5\n221             )\n222             SELECT * FROM problem_frequency\n223             ORDER BY frequency DESC\n224             \"\"\"\n225 \n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 211,
      "line_range": [
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "244             # Analyze solution effectiveness patterns\n245             query = f\"\"\"\n246             SELECT\n247                 solution,\n248                 COUNT(*) as usage_count,\n249                 AVG(CASE WHEN verified THEN 1 ELSE 0 END) as success_rate\n250             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n251             WHERE solution IS NOT NULL AND solution != ''\n252             GROUP BY solution\n253             HAVING COUNT(*) > 3\n254             \"\"\"\n255 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 245,
      "line_range": [
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "325             # Create knowledge summary for Bob\n326             query = f\"\"\"\n327             WITH latest_knowledge AS (\n328                 SELECT\n329                     'S740_ISSUE' as knowledge_type,\n330                     problem_type as category,\n331                     problem_description as content,\n332                     solution as answer,\n333                     ARRAY_TO_STRING(parts_needed, ', ') as parts,\n334                     difficulty,\n335                     source_url\n336                 FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n337                 WHERE DATE(scraped_at) = CURRENT_DATE()\n338 \n339                 UNION ALL\n340 \n341                 SELECT\n342                     'EQUIPMENT_HACK' as knowledge_type,\n343                     hack_type as category,\n344                     description as content,\n345                     benefits as answer,\n346                     ARRAY_TO_STRING(tools_needed, ', ') as parts,\n347                     'moderate' as difficulty,\n348                     source_url\n349                 FROM `{self.project_id}.skidsteer_knowledge.equipment_hacks`\n350                 WHERE DATE(scraped_at) = CURRENT_DATE()\n351             )\n352             INSERT INTO `{self.project_id}.knowledge_base.bob_knowledge`\n353             (knowledge_id, knowledge_type, category, content, answer, metadata, created_at, source)\n354             SELECT\n355                 GENERATE_UUID() as knowledge_id,\n356                 knowledge_type,\n357                 category,\n358                 content,\n359                 answer,\n360                 TO_JSON_STRING(STRUCT(parts as parts, difficulty as difficulty)) as metadata,\n361                 CURRENT_TIMESTAMP() as created_at,\n362                 source_url as source\n363             FROM latest_knowledge\n364             \"\"\"\n365 \n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 326,
      "line_range": [
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "385             self.bq_client.create_dataset(dataset, exists_ok=True)\n386         except Exception:\n387             pass\n388 \n",
      "col_offset": 8,
      "end_col_offset": 16,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 386,
      "line_range": [
        386,
        387
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "403             self.bq_client.create_table(table, exists_ok=True)\n404         except Exception:\n405             pass\n406 \n",
      "col_offset": 8,
      "end_col_offset": 16,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 404,
      "line_range": [
        404,
        405
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "418             # Get top problems found today\n419             query = f\"\"\"\n420             SELECT\n421                 problem_type,\n422                 COUNT(*) as count\n423             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n424             WHERE DATE(scraped_at) = CURRENT_DATE()\n425             GROUP BY problem_type\n426             ORDER BY count DESC\n427             LIMIT 5\n428             \"\"\"\n429 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 419,
      "line_range": [
        419,
        420,
        421,
        422,
        423,
        424,
        425,
        426,
        427,
        428
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "435             # Count new solutions\n436             query = f\"\"\"\n437             SELECT COUNT(DISTINCT solution) as new_solutions\n438             FROM `{self.project_id}.skidsteer_knowledge.bobcat_s740_issues`\n439             WHERE DATE(scraped_at) = CURRENT_DATE()\n440             AND solution IS NOT NULL AND solution != ''\n441             \"\"\"\n442 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 436,
      "line_range": [
        436,
        437,
        438,
        439,
        440,
        441
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "480             # Update the scraping history record\n481             query = f\"\"\"\n482             UPDATE `{self.project_id}.circle_of_life.scraping_history`\n483             SET\n484                 end_time = CURRENT_TIMESTAMP(),\n485                 status = 'completed',\n486                 forums_scraped = {results.get('forum_scraping', {}).get('forums_discovered', 0)},\n487                 threads_scraped = {results.get('forum_scraping', {}).get('threads_scraped', 0)},\n488                 solutions_found = {results.get('skidsteer_scraping', {}).get('solutions_found', 0)},\n489                 s740_issues_found = {results.get('skidsteer_scraping', {}).get('issues_found', 0)},\n490                 metadata = PARSE_JSON('{json.dumps({\"phases\": results.get(\"phases_completed\", [])})}')\n491             WHERE scrape_id = '{scrape_id}'\n492             \"\"\"\n493 \n",
      "col_offset": 24,
      "end_col_offset": 20,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 481,
      "line_range": [
        481,
        482,
        483,
        484,
        485,
        486,
        487,
        488,
        489,
        490,
        491,
        492
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "501         try:\n502             query = f\"\"\"\n503             UPDATE `{self.project_id}.circle_of_life.scraping_history`\n504             SET\n505                 end_time = CURRENT_TIMESTAMP(),\n506                 status = 'failed',\n507                 errors = '{error}'\n508             WHERE scrape_id = '{scrape_id}'\n509             \"\"\"\n510 \n",
      "col_offset": 24,
      "end_col_offset": 20,
      "filename": "src/circle_of_life_scraper.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 502,
      "line_range": [
        502,
        503,
        504,
        505,
        506,
        507,
        508,
        509
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "417             # Check if Bob can query the submission\n418             query = f\"\"\"\n419                 SELECT submission_id\n420                 FROM `{table_id}`\n421                 WHERE submission_id = '{test_submission['submission_id']}'\n422             \"\"\"\n423             result = self.bigquery_client.query(query).result()\n",
      "col_offset": 24,
      "end_col_offset": 22,
      "filename": "src/ecosystem_integration.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 418,
      "line_range": [
        418,
        419,
        420,
        421,
        422
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "41         try:\n42             query = f\"\"\"\n43             SELECT\n44                 submission_id,\n45                 full_name,\n46                 email,\n47                 equipment_type,\n48                 problem_description,\n49                 selected_service,\n50                 payment_status,\n51                 ai_analysis,\n52                 created_at\n53             FROM `{self.project_id}.{self.dataset_id}.{self.table_id}`\n54             WHERE created_at > @last_check\n55             ORDER BY created_at DESC\n56             LIMIT 10\n57             \"\"\"\n58 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/mvp3_bigquery_monitor.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 42,
      "line_range": [
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "136         try:\n137             query = f\"\"\"\n138             SELECT\n139                 DATE(created_at) as date,\n140                 COUNT(*) as total_submissions,\n141                 COUNT(DISTINCT email) as unique_customers,\n142                 SUM(payment_amount) as revenue,\n143                 AVG(ai_confidence_score) as avg_confidence,\n144                 COUNTIF(payment_status = 'completed') as paid_submissions,\n145                 COUNTIF(email_sent) as emails_sent\n146             FROM `{self.project_id}.{self.dataset_id}.{self.table_id}`\n147             WHERE DATE(created_at) = CURRENT_DATE()\n148             GROUP BY date\n149             \"\"\"\n150 \n",
      "col_offset": 24,
      "end_col_offset": 18,
      "filename": "src/mvp3_bigquery_monitor.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 137,
      "line_range": [
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "323         view_id = f\"{self.dataset_id}.daily_summary\"\n324         view_query = f\"\"\"\n325         SELECT\n326             DATE(created_at) as date,\n327             COUNT(*) as total_submissions,\n328             COUNT(DISTINCT email) as unique_customers,\n329             SUM(payment_amount) as revenue,\n330             AVG(ai_confidence_score) as avg_confidence,\n331             COUNTIF(payment_status = 'completed') as paid_submissions,\n332             COUNTIF(email_sent) as emails_sent,\n333             ARRAY_AGG(DISTINCT equipment_category IGNORE NULLS) as categories\n334         FROM `{self.dataset_id}.diagnostic_submissions`\n335         WHERE created_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)\n336         GROUP BY date\n337         ORDER BY date DESC\n338         \"\"\"\n339 \n",
      "col_offset": 25,
      "end_col_offset": 14,
      "filename": "src/mvp3_bigquery_schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 324,
      "line_range": [
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    }
  ]
}